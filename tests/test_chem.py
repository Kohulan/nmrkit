import pytest
from fastapi.testclient import TestClient
from app.main import app
import random

client = TestClient(app)


@pytest.fixture
def test_smiles():
    return "CN1C=NC2=C1C(=O)N(C(=O)N2C)C"

def test_framework():
    return random.choice(['cdk','rdkit'])

def test_boolean():
    return random.choice(['true', 'false'])

def test_chem_index():
    response = client.get("/latest/chem/")
    assert response.status_code == 200
    assert response.json() == {"status": "OK"}

def molfile():
    return '''
CDK     08292314132D

 41 46  0  0  0  0  0  0  0  0999 V2000
   -5.1989   -1.5002    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -3.9000   -0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -3.9000    0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -2.6000    1.5000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -2.6000    3.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -3.8990    3.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.3000    0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.0000    1.5000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.0000    3.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    1.3000    0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    1.3000   -0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.0000   -1.5000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.3000   -0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -2.6000   -1.5000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.0000   -3.9600    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    1.3000   -4.7100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6000   -3.9600    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.9000   -4.7100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    5.1989   -3.9598    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    6.4981   -4.7096    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.9000   -6.2100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6000   -6.9600    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6000   -8.4600    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    3.8990   -9.2100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    1.3000   -6.2100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.0000   -6.9600    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.0000   -8.4600    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -1.3000   -6.2100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.3000   -4.7100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -2.6000   -3.9600    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -2.3395   -2.4828    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -3.9000   -4.7100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -3.9000   -6.2100    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -2.6000   -6.9600    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -5.1989   -3.9598    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6000   -1.5000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6000   -3.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    3.9000   -0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.9000    0.7500    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    2.6000    1.5000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    5.1989   -1.5002    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  1  0  0  0  0
  2  3  1  0  0  0  0
  3  4  2  0  0  0  0
  4  5  1  0  0  0  0
  5  6  1  0  0  0  0
  4  7  1  0  0  0  0
  7  8  1  0  0  0  0
  8  9  1  0  0  0  0
  8 10  2  0  0  0  0
 10 11  1  0  0  0  0
 11 12  2  0  0  0  0
 12 13  1  0  0  0  0
  7 13  2  0  0  0  0
 13 14  1  0  0  0  0
  2 14  2  0  0  0  0
 12 15  1  0  0  0  0
 15 16  1  0  0  0  0
 16 17  1  0  0  0  0
 17 18  2  0  0  0  0
 18 19  1  0  0  0  0
 19 20  1  0  0  0  0
 18 21  1  0  0  0  0
 21 22  2  0  0  0  0
 22 23  1  0  0  0  0
 23 24  1  0  0  0  0
 22 25  1  0  0  0  0
 16 25  2  0  0  0  0
 25 26  1  0  0  0  0
 26 27  1  0  0  0  0
 26 28  2  0  0  0  0
 28 29  1  0  0  0  0
 15 29  2  0  0  0  0
 29 30  1  0  0  0  0
 30 31  1  0  0  0  0
 30 32  1  0  0  0  0
 32 33  1  0  0  0  0
 33 34  1  0  0  0  0
 28 34  1  0  0  0  0
 32 35  1  0  0  0  0
 11 36  1  0  0  0  0
 36 37  1  0  0  0  0
 36 38  1  0  0  0  0
 38 39  1  0  0  0  0
 39 40  1  0  0  0  0
 10 40  1  0  0  0  0
 38 41  1  0  0  0  0
M  END'''

def test_hosecode(test_smiles):
    response = client.get(f"/latest/chem/hosecode?smiles={test_smiles}&framework={test_framework}&spheres=3&usestereo={test_boolean}")
    assert response.status_code == 200
    assert response.headers["content-type"] == "application/json"
    assert response.text == '["C-4;N(CC/=CC,=N/)","N-3;CCC(=CC,=N,/N&,=ON,&/)","C-3;=NN(C,CC/=&N,=&C,/)","N-2;=CC(N,=CN/&C,C&,CC/)","C-3;=CNN(CN,CC,=C/=ON,&C,=O&,,&/)","C-3;=CCN(NN,=ON,CC/CC,=&,,&C,=&,/)","C-3;=OCN(,=CN,CC/NN,CC,=O&,/)","O-1;=C(CN/=CN,CC/)","N-3;CCC(=OC,=ON,/,=CN,,&C/)","C-3;=ONN(,CC,CC/=OC,,=&N,/)","O-1;=C(NN/CC,CC/)","N-3;CCC(=CN,=ON,/CN,=C,,&C/)","C-4;N(CC/=CN,=ON/)","C-4;N(CC/=OC,=ON/)"]'                                                                                                                                     

def test_label_atoms(self):
        with self.app() as client, self.app_context():
            data = {molfile}
            response = client.post(
                "/latest/chem/label-atoms",
                data=data,
                headers={"Content-Type": "text/plain},
            )
            self.assertEqual(200, response.status_code)
            self.assertEqual('{
            "html_url": "http://alatis.nmrfam.wisc.edu/upload/52ef2a8c-4c36-4b24-afca-c36b10f944d9",
            "inchi": "InChI=1S/C31H32O10/c1-12-28(33)26-18(10-40-12)30(35)22-16(6-14(32)7-20(22)38-4)24(26)25-17-8-15(37-3)9-21(39-5)23(17)31(36)19-11-41-13(2)29(34)27(19)25/h6-9,12-13,28-29,32-36H,10-11H2,1-5H3/t12-,13-,28+,29+/m0/s1",
            "key": "52ef2a8c-4c36-4b24-afca-c36b10f944d9",
            "status": "success",
            "structure": "\n    alatis_output_mol\n\n 41 46  0  0  0  0  0  0  0  0999 V2000\n   -2.9226   -1.8158    4.0885 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.9220    4.6204   -1.3500 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0934   -4.9734   -0.2271 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2547    2.5808    1.1736 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.3484   -4.5168   -3.4223 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6103    0.5673   -1.4681 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8393    1.3095   -0.9289 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.4913   -2.7157   -0.9178 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.7540   -4.1858   -2.3236 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.4932   -0.4354    4.1121 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.8968    1.7477   -2.2406 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5528   -1.4742    3.5177 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.9722    3.1543   -1.7616 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.8628    1.0233   -1.8625 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7061   -3.9881   -1.4385 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2884    0.3608   -0.1026 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.3150   -1.6063   -1.2455 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.7261   -0.1053    2.6499 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9959    0.5709   -1.9442 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.5616    1.1170    0.4253 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5972   -3.1264   -2.6667 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2992    0.6068    0.8687 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.3916   -1.8160   -2.1488 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.0115   -0.0788    0.3146 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.0955   -0.3024   -0.6843 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2817   -0.3047    1.6910 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.9278    0.7754   -1.0606 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6582   -0.7044    2.1890 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.7650    2.1962   -0.5603 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.9877    0.3320    2.2277 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.2243   -0.7058   -2.4573 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.1548    1.2085   -3.1803 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.3856    0.5159    2.3651 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.7152    2.4449    0.4713 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.9276    0.4723    3.2219 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.3219   -0.8393   -3.2710 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0289   -5.1042   -1.1706 O   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5200    1.3771    1.3874 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6248   -3.2915   -3.5721 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.8900   -0.6185    4.4631 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1898    2.9640   -2.5025 O   0  0  0  0  0  0  0  0  0  0  0  0\n  7 20  1  0  0  0  0\n  8 15  1  0  0  0  0\n  9 21  1  0  0  0  0\n 10 18  1  0  0  0  0\n 11 19  1  0  0  0  0\n 12  1  1  0  0  0  0\n 12 40  1  0  0  0  0\n 13  2  1  0  0  0  0\n 13 41  1  0  0  0  0\n 14  6  1  0  0  0  0\n 14  7  2  0  0  0  0\n 15  9  2  0  0  0  0\n 15 37  1  0  0  0  0\n 16  6  2  0  0  0  0\n 17  8  2  0  0  0  0\n 17 23  1  0  0  0  0\n 18 26  1  0  0  0  0\n 19 27  1  0  0  0  0\n 20 22  2  0  0  0  0\n 20 38  1  0  0  0  0\n 21 23  2  0  0  0  0\n 21 39  1  0  0  0  0\n 22 16  1  0  0  0  0\n 22 30  1  0  0  0  0\n 23 31  1  0  0  0  0\n 24 16  1  0  0  0  0\n 24 25  1  0  0  0  0\n 25 17  1  0  0  0  0\n 25 27  2  0  0  0  0\n 26 24  2  0  0  0  0\n 26 28  1  0  0  0  0\n 27 29  1  0  0  0  0\n 28 12  1  0  0  0  0\n 28 33  1  0  0  0  0\n 29 13  1  0  0  0  0\n 29 34  1  0  0  0  0\n 30 18  2  0  0  0  0\n 30 35  1  0  0  0  0\n 31 19  2  0  0  0  0\n 31 36  1  0  0  0  0\n 32 14  1  0  0  0  0\n 37  3  1  0  0  0  0\n 38  4  1  0  0  0  0\n 39  5  1  0  0  0  0\n 40 10  1  0  0  0  0\n 41 11  1  0  0  0  0\nM  END\n> <ALATIS_Standard_InChI>\nInChI=1S/C31H32O10/c1-12-28(33)26-18(10-40-12)30(35)22-16(6-14(32)7-20(22)38-4)24(26)25-17-8-15(37-3)9-21(39-5)23(17)31(36)19-11-41-13(2)29(34)27(19)25/h6-9,12-13,28-29,32-36H,10-11H2,1-5H3/t12-,13-,28+,29+/m0/s1\n\n> <ALATIS_Warnings>\n\n> <ALATIS_Errors>\n\n> <ALATIS_Map>\nnew index\tatom name\toriginal index\n1\tC\t41\n2\tC\t35\n3\tC\t20\n4\tC\t6\n5\tC\t24\n6\tC\t14\n7\tC\t3\n8\tC\t17\n9\tC\t21\n10\tC\t40\n11\tC\t34\n12\tC\t38\n13\tC\t32\n14\tC\t2\n15\tC\t18\n16\tC\t13\n17\tC\t16\n18\tC\t10\n19\tC\t28\n20\tC\t4\n21\tC\t22\n22\tC\t7\n23\tC\t25\n24\tC\t12\n25\tC\t15\n26\tC\t11\n27\tC\t29\n28\tC\t36\n29\tC\t30\n30\tC\t8\n31\tC\t26\n32\tO\t1\n33\tO\t37\n34\tO\t31\n35\tO\t9\n36\tO\t27\n37\tO\t19\n38\tO\t5\n39\tO\t23\n40\tO\t39\n41\tO\t33\n\n\n> <ALATIS_Mixture_Map>\n\n$$$$\n"}', response.data)

# Run the tests
if __name__ == "__main__":
    pytest.main()